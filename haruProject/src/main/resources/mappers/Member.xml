<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.haruProject.MemberMapper">
	<select id="HJGetTotalMember" parameterType="SearchItem" resultType="int">
		SELECT count(*) 
		FROM member
		WHERE mstatus_mcd != 0
		<if test="(type4 != 0 and !type4.equals('')) or ((type5 != 0 and !type5.equals('')) and (search1 != null and !search1.equals('')))">		
			and
		</if>
		<if test="type4 != 0 and !type4.equals('')">
			mstatus_mcd = #{type4}
		</if>	
		<if test="(type4 != 0 and !type4.equals('')) and ((type5 != 0 and !type5.equals('')) and (search1 != null and !search1.equals('')))">		
			AND
		</if>
		<if test="(type5 != 0 and !type5.equals('')) and (search1 != null and !search1.equals(''))">
			<choose>
			  	<when test="type5 == 1">
			  		mname LIKE '%' || #{search1} || '%'
			  	</when>
			  	<when test="type5 == 2">
			  		mtel LIKE '%' || #{search1} || '%'
			  	</when>
			 </choose>
		</if>
	</select>
	
	<select id="HJSelectMembers" parameterType="Map" resultType="Member">
		SELECT *
		FROM (
				SELECT ROWNUM rn, a.*
			  	FROM (
			  			SELECT mb.*,
			  				   cm.content mstatis_content
			  			FROM member mb
			  			JOIN common cm ON mb.mstatus_bcd = cm.bcd and mb.mstatus_mcd =cm.mcd
			  			WHERE mb.mstatus_mcd != 0
			  			<if test="(search.type4 != 0 and !search.type4.equals('')) or ((search.type5 != 0 and !search.type5.equals('')) and (search.search1 != null and !search.search1.equals('')))">		
			  				AND
						</if>
			  			<if test="search.type4 != 0 and !search.type4.equals('')">
									mb.mstatus_mcd = #{search.type4}
			  			</if>	
			  			<if test="(search.type4 != 0 and !search.type4.equals('')) and ((search.type5 != 0 and !search.type5.equals('')) and (search.search1 != null and !search.search1.equals('')))">		
			  				AND
						</if>
						<if test="(search.type5 != 0 and !search.type5.equals('')) and (search.search1 != null and !search.search1.equals(''))">
			  				<choose>
			  					<when test="search.type5 == 1">
			  						mb.mname LIKE '%' || #{search.search1} || '%'
			  					</when>
			  					<when test="search.type5 == 2">
			  						mb.mtel LIKE '%' || #{search.search1} || '%'
			  					</when>
			  				</choose>
						</if>
						
			  			
						ORDER BY memno desc
			  		) a
		)
		WHERE rn BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<select id="HJMemberDetail" parameterType="int" resultType="Member">
		SELECT 
				mb.memno,
				mb.mid,
				mb.mpasswd,
				mb.mname,
				mb.mtel,
				mb.memail,
				mb.reg_date,
				mb.update_date,
				mb.is_agree,
				mb.agree_date,
				mb.mstatus_mcd,
				mb.mstatus_bcd,
				cm.content mstatis_content
		FROM member mb
		JOIN common cm ON mb.mstatus_bcd = cm.bcd and mb.mstatus_mcd =cm.mcd
		WHERE memno = #{memno}
	</select>
	
	<insert id="HJInsertMember" parameterType="Member">
			INSERT INTO member(memno,mpasswd,mname,mtel,memail,reg_date,is_agree,agree_date)
			VALUES (seq_mem.nextval,#{mpasswd},#{mname},#{mtel},#{memail},sysdate,#{is_agree},
						<if test="is_agree == 1">
							sysdate
						</if>
						<if test="is_agree == 0">
							null
						</if>
					)
		

	</insert>
	
	<select id="HJMstatusList" resultType="Common">
		SELECT *
		FROM common
		WHERE bcd = 200 AND mcd != 999
	</select>
	
	<update id="HJUpdateMember" parameterType="Member">
		UPDATE member SET
			mname = #{mname},
			mtel = #{mtel},
			mstatus_mcd = #{mstatus_mcd},
			is_agree = #{is_agree},
			<if test="is_agree == 1">
				agree_date = sysdate,
			</if>
			<if test="is_agree == 0">
				agree_date = null,
			</if>
			update_date = sysdate
		WHERE memail = #{memail}
	</update>
	
	
	<!-- 이메일 중복 검사 
		(MSTATUS_MCD = 100: 회원)
	-->
	<select id="JS_SelectIdDuplCnt" parameterType="Member" resultType="int">
		SELECT COUNT(*) 
		FROM MEMBER 
		WHERE MEMAIL = #{memail} 
			AND MSTATUS_MCD = 100
			<if test="mname != null and !mname.equals('')">
				AND MNAME = #{mname}
			</if>
	</select>
	
	<!-- 인증코드, 전송시간 저장
		MSTATUS_MCD = 0인 EMAIL 이 있으면 UPDATE, 없으면 INSERT
	 -->
	<update id="JS_EmailAuthMergeInto" parameterType="Member">
		MERGE INTO MEMBER 
	    USING DUAL
	    ON (MSTATUS_MCD = 0 AND MEMAIL = #{memail})
	    WHEN MATCHED THEN 
	          UPDATE SET
	          AUTHCODE = #{authcode},
	          VALID_TIME = #{valid_time}
	    WHEN NOT MATCHED THEN  
	         INSERT (MEMNO, MPASSWD, MNAME, MTEL, MEMAIL, MSTATUS_MCD, AUTHCODE, VALID_TIME)
	         VALUES (SEQ_MEM.NEXTVAL, ' ', ' ', ' ', #{memail}, 0, #{authcode}, #{valid_time})
	</update>
	
	<!-- 인증코드, 전송시간 가져오기 -->
	<select id="JS_SelectAuthCode" parameterType="java.lang.String" resultType="Member">
		SELECT AUTHCODE, VALID_TIME 
		FROM MEMBER
		WHERE MEMAIL = #{email} AND MSTATUS_MCD = 0	
	</select>
	
	<!-- 회원가입 -->
	<update id="JS_SignUpMember" parameterType="Member">
		UPDATE MEMBER SET
			MPASSWD = #{mpasswd},
			MNAME = #{mname},
			MTEL = #{mtel},
			MEMAIL = #{memail},
			MSTATUS_MCD = 100,
			IS_AGREE = #{is_agree},
			AGREE_DATE = sysdate
		WHERE MEMAIL = #{memail} AND MSTATUS_MCD = 0
	</update>
	
	<!-- 이메일 찾기 -->
	<select id="JS_SelectEmail" parameterType="Member" resultType="java.lang.String">
		SELECT MEMAIL 
		FROM MEMBER
		WHERE MNAME = #{mname} 
			AND MTEL = #{mtel}
			AND MSTATUS_MCD = 100
	</select>
	
	<!-- 재설정된 비밀번호 업데이트 -->
	<update id="JS_UpdatePassword" parameterType="Map">
		UPDATE MEMBER 
		SET
			MPASSWD = #{encyrpt_pw}
		WHERE
			MSTATUS_MCD = 100 
			AND MEMAIL = #{member.memail}
			<if test="member.mname != null and !member.mname.equals('')">
				AND MNAME = #{member.mname}
			</if>
			
	</update>
	
	<!-- 비밀번호 가져오기 -->
	<select id="JS_SelectPassword" parameterType="Member" resultType="Member">
		SELECT MEMNO, MNAME, MPASSWD, mask_email(MEMAIL) as memail
		FROM MEMBER
		WHERE MEMAIL = #{memail} AND MSTATUS_MCD = 100
	</select>
	
	   <!--  내 정보 수정  -->
   <!--  저장된 정보 불러오기  -->
   <select id="HR_getMyinfo" parameterType="int" resultType="Member">
      SELECT MEMNO, MNAME, MEMAIL, MPASSWD, MTEL, MID 
      FROM MEMBER WHERE MEMNO = #{memno} 
   </select>
   
   <!--  회원 탈퇴 > 상태 수정  -->
   <update id="HR_deleteMember" parameterType="int"> 
      UPDATE MEMBER SET mstatus_mcd = 200, mid = null
      WHERE memno = #{memno} 
   </update>
   
   <!--  회원 정보 수정  -->
   <update id="HR_updateMember" parameterType="Member">
      UPDATE MEMBER
      <set>
         mname = #{mname}, mtel = #{mtel}
         <if test="mpasswd != null and mpasswd != ''"> , mpasswd = #{mpasswd} </if>
      </set>
      WHERE memno = #{memno}
   </update>
   
   <!--  비밀번호 가져오기  -->
	<select id="HR_SelectPassword" parameterType="int" resultType="Member"> 
		SELECT MEMNO, MNAME, MPASSWD, MEMAIL, MTEL 
		FROM MEMBER 
		WHERE MEMNO = #{memno} AND MSTATUS_MCD = 100 
	</select>
	   
   <!-- 카카오 회원 가입 -->
<!--    <insert id="JS_InsertKakaoUser" parameterType="Member"> -->
<!-- 	   INSERT INTO MEMBER (MEMNO, MID, MNAME, MEMAIL) -->
<!-- 			SELECT SEQ_MEM.NEXTVAL, #{mid}, #{mname}, #{memail} --> 
<!-- 			FROM DUAL -->
<!-- 			WHERE NOT EXISTS ( -->
<!-- 		    	SELECT 1 FROM MEMBER WHERE MEMAIL = #{memail} AND MID = #{mid} -->
<!-- 		); -->
<!--    </insert> -->
   <select id="JS_InsertKakaoUser" parameterType="Member" statementType="CALLABLE">
		{
			CALL GET_OR_CREATE_MEMBER(
	            #{memail,		mode=IN,	jdbcType=VARCHAR}, 
	            #{mid,		 	mode=IN,	jdbcType=VARCHAR}, 
	            #{mname, 		mode=IN,	jdbcType=VARCHAR}, 
	            #{memno, 		mode=OUT,	jdbcType=INTEGER}
	        )
        }
	</select>
	
	<select id="HR_chkMemberTime" resultType="Member">
		SELECT memno, mid, valid_time
		FROM MEMBER
		WHERE VALID_TIME IS NOT NULL AND MPASSWD = ' '
	</select>
	
	<delete id="HR_cancelMember" parameterType="Member">
		DELETE
		FROM MEMBER
		WHERE MEMNO = #{memno}
	</delete>
	
	
	<!-- 카카오 로그인 유저 id -->
	<select id="JS_SelectKakaoUserId" parameterType="int" resultType="java.lang.String">
		SELECT MID FROM MEMBER WHERE MEMNO = #{memno}
	</select>
</mapper>